import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.Image;
import org.newdawn.slick.Input;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.state.BasicGameState;
import org.newdawn.slick.state.StateBasedGame;

import entity.Entity;
import entity.MovingEntity;

public class MainMenuState extends BasicGameState {

	private int stateID;

	private Entity background;
	private MovingEntity startGameOption;
	private MovingEntity exitGameOption;

	private static int menuX = 410;
	private static int menuY = 160;

	float startGameScale;
	float exitGameScale;

	public MainMenuState(int stateID) {
		this.stateID = stateID;

		startGameScale = 1;
		exitGameScale = 1;
	}

	@Override
	public void init(GameContainer arg0, StateBasedGame arg1)
			throws SlickException {

		background = new Entity("img/menu.jpg");

		Image menuOptions = new Image("img/menuoptions.png");
		
		
		startGameOption = new MovingEntity("img/menuoptions.png",menuX,menuY,startGameScale);
		startGameOption = menuOptions.subImage(0, 0, 377, 71);
		startGameOption.setMaxScale(1.05f);
		startGameOption.setMinScale(1.0f);
		startGameOption.setScaleIncr(0.0001f);

		exitGameOption = menuOptions.subEntity(0, 71, 377, 71);
		exitGameOption.setX(menuX);
		exitGameOption.setY(menuY + 80);
		exitGameOption.setMaxScale(1.05f);
		exitGameOption.setMinScale(1.0f);
		exitGameOption.setScaleIncr(0.0001f);
		exitGameOption.setScale(exitGameScale);

	}

	@Override
	public void render(GameContainer arg0, StateBasedGame arg1, Graphics arg2)
			throws SlickException {
		background.draw();
		startGameOption.draw();
		exitGameOption.draw();

	}

	@Override
	public void update(GameContainer gc, StateBasedGame sbg, int delta)
			throws SlickException {

		Input input = gc.getInput();

		int mouseX = input.getMouseX();
		int mouseY = input.getMouseY();

		if (startGameOption.isInside(mouseX, mouseY)) {
			startGameOption.enlarge(delta);

			if (input.isMouseButtonDown(Input.MOUSE_LEFT_BUTTON)) {
				sbg.enterState(Tetris.GAMEPLAYSTATE);
			}
		} else {
			startGameOption.reduce(delta);
		}

		if (exitGameOption.isInside(mouseX, mouseY)) {
			exitGameOption.enlarge(delta);
			
			if (input.isMouseButtonDown(Input.MOUSE_LEFT_BUTTON))
				gc.exit();
		} else {
			exitGameOption.reduce(delta);
		}

	}

	@Override
	public int getID() {
		return stateID;
	}

}
